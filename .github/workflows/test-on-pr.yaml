name: Test on Pull Request

# Controls when the action will run. 
on:
  pull_request:
    paths-ignore:
      - 'docs/**'
      - 'design/**'
      - 'examples/**'
      - 'extensions/**'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:

  # This workflow builds the kruize image and runs an end-to-end test to validate the remote monitoring workflow
  build_crc:
    # The type of runner that the job will run on
    runs-on: ubuntu-20.04

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          repository: kruize/autotune
      - name: Setup Minikube
        uses: manusa/actions-setup-minikube@v2.3.0
        with:
          minikube version: 'v1.16.0'
          kubernetes version: 'v1.19.2'
      - name: Build crc
        run: |
          echo Build crc
          pr_number=${{ github.event.pull_request.number }}
          echo "pr_number=${pr_number}" >> "$GITHUB_ENV"
          ./build.sh -i autotune_operator:pr_${pr_number}
          docker images | grep autotune
      - name: Check cluster info on minikube
        run: |
          kubectl cluster-info
          kubectl get pods -n kube-system
      - name: Install Prometheus on minikube
        run: |
          echo Install Prometheus on minikube
          cd scripts
          ./prometheus_on_minikube.sh -as
      - name: Deploy Kruize in crc mode
        run: |
          echo Deploy kruize in crc mode
          echo "***************************************************************"
          cp ./manifests/crc/default-db-included-installation/minikube/kruize-crc-minikube.yaml ./manifests/crc/default-db-included-installation/minikube/kruize-crc-minikube.yaml.old
          sed -e "s/imagePullPolicy: Always/imagePullPolicy: IfNotPresent/g" ./manifests/crc/default-db-included-installation/minikube/kruize-crc-minikube.yaml.old > ./manifests/crc/default-db-included-installation/minikube/kruize-crc-minikube.yaml
          cat ./manifests/crc/default-db-included-installation/minikube/kruize-crc-minikube.yaml
          cd tests
          echo "PR_NUMBER = ${{ env.pr_number }}"
          ./test_autotune.sh -c minikube -i autotune_operator:pr_${{ env.pr_number }} --testsuite=remote_monitoring_tests --testcase=test_e2e --resultsdir=${GITHUB_WORKSPACE}
      - name: Capture ffdc logs
        if: always()
        run: |
          echo "Capturing ffdc logs"
          ./scripts/ffdc.sh -m crc -d ${GITHUB_WORKSPACE}/kruize_test_results
      - name: Archive results
        if: always()
        run: |
          cd ${GITHUB_WORKSPACE}
          tar cvf crc_results.tar kruize_test_results

      - name: Upload results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: crc-results
          path: ./crc_results.tar
          retention-days: 2


  test_crc_manifest_build:
    # The type of runner that the job will run on
    runs-on: ubuntu-20.04

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
      - name: Setup Minikube
        uses: manusa/actions-setup-minikube@v2.3.0
        with:
          minikube version: 'v1.16.0'
          kubernetes version: 'v1.19.2'

      - name: Check cluster info on minikube
        run: |
          kubectl cluster-info
          kubectl get pods -n kube-system

      - name: Install Prometheus on minikube
        run: |
          echo Install Prometheus on minikube
          cd scripts
          ./prometheus_on_minikube.sh -as

      - name: Test with manifest kruize build in crc mode
        run: |
          echo Test with manifest kruize build in crc mode
          echo "***************************************************************"
          cd tests
          ./test_autotune.sh -c minikube --testsuite=remote_monitoring_tests --testcase=test_e2e --resultsdir=${GITHUB_WORKSPACE}

      - name: Capture ffdc logs
        if: always()
        run: |
          ./scripts/ffdc.sh -m crc -d ${GITHUB_WORKSPACE}/kruize_test_results

      - name: Archive results
        if: always()
        run: |
          cd ${GITHUB_WORKSPACE}
          tar cvf crc_manifest_results.tar kruize_test_results

      - name: Upload results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: crc-manifest-results
          path: ./crc_manifest_results.tar
          retention-days: 2


  # This workflow builds the kruize image and runs an end-to-end test to validate the local monitoring workflow
  build_crc_local_monitoring:
    # The type of runner that the job will run on
    runs-on: ubuntu-20.04

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
        with:
          repository: kruize/autotune
      - name: Setup Minikube
        uses: manusa/actions-setup-minikube@v2.3.0
        with:
          minikube version: 'v1.16.0'
          kubernetes version: 'v1.19.2'
      - name: Build crc
        run: |
          echo Build crc
          pr_number=${{ github.event.pull_request.number }}
          echo "pr_number=${pr_number}" >> "$GITHUB_ENV"
          ./build.sh -i autotune_operator:pr_${pr_number}
          docker images | grep autotune
      - name: Check cluster info on minikube
        run: |
          kubectl cluster-info
          kubectl get pods -n kube-system
      - name: Install Prometheus on minikube
        run: |
          echo Install Prometheus on minikube
          cd scripts
          ./prometheus_on_minikube.sh -as
      - name: Deploy Kruize in crc mode
        run: |
          echo Deploy kruize in crc mode
          echo "***************************************************************"
          cp ./manifests/crc/default-db-included-installation/minikube/kruize-crc-minikube.yaml ./manifests/crc/default-db-included-installation/minikube/kruize-crc-minikube.yaml.old
          sed -e "s/imagePullPolicy: Always/imagePullPolicy: IfNotPresent/g" ./manifests/crc/default-db-included-installation/minikube/kruize-crc-minikube.yaml.old > ./manifests/crc/default-db-included-installation/minikube/kruize-crc-minikube.yaml
          cat ./manifests/crc/default-db-included-installation/minikube/kruize-crc-minikube.yaml
          cd tests
          echo "PR_NUMBER = ${{ env.pr_number }}"
          ./test_autotune.sh -c minikube -i autotune_operator:pr_${{ env.pr_number }} --testsuite=local_monitoring_tests --testcase=test_e2e --resultsdir=${GITHUB_WORKSPACE}
      - name: Capture ffdc logs
        if: always()
        run: |
          echo "Capturing ffdc logs"
          ./scripts/ffdc.sh -m crc -d ${GITHUB_WORKSPACE}/kruize_build_crc_lm_test_results
      - name: Archive results
        if: always()
        run: |
          cd ${GITHUB_WORKSPACE}
          tar cvf kruize_build_crc_lm_test_results.tar kruize_build_crc_lm_test_results

      - name: Upload results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: kruize-build-crc-lm-test-results
          path: ./kruize_build_crc_lm_test_results.tar
          retention-days: 2


  # This job runs an end-to-end test to validate the local monitoring workflow
  test_crc_manifest_build_local_monitoring:
    # The type of runner that the job will run on
    runs-on: ubuntu-20.04

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      - name: Setup Minikube
        uses: manusa/actions-setup-minikube@v2.3.0
        with:
          minikube version: 'v1.16.0'
          kubernetes version: 'v1.19.2'

      - name: Check cluster info on minikube
        run: |
          kubectl cluster-info
          kubectl get pods -n kube-system

      - name: Install Prometheus on minikube
        run: |
          echo Install Prometheus on minikube
          cd scripts
          ./prometheus_on_minikube.sh -as

      - name: Test with manifest kruize build in crc mode
        run: |
          echo Test with manifest kruize build in crc mode
          echo "***************************************************************"
          cd tests
          ./test_autotune.sh -c minikube --testsuite=local_monitoring_tests --testcase=test_e2e --resultsdir=${GITHUB_WORKSPACE}

      - name: Capture ffdc logs
        if: always()
        run: |
          ./scripts/ffdc.sh -m crc -d ${GITHUB_WORKSPACE}/kruize_local_monitoring_test_results

      - name: Archive results
        if: always()
        run: |
          cd ${GITHUB_WORKSPACE}
          tar cvf kruize_local_monitoring_test_results.tar kruize_local_monitoring_test_results

      - name: Upload results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: kruize-local-monitoring-test-results
          path: ./kruize_local_monitoring_test_results.tar
          retention-days: 2
